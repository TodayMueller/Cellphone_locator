// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: location_service.proto

#include "location_service.pb.h"
#include "location_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace location {

static const char* SubscriberProvider_method_names[] = {
  "/location.SubscriberProvider/SetSubscriber",
};

std::unique_ptr< SubscriberProvider::Stub> SubscriberProvider::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SubscriberProvider::Stub> stub(new SubscriberProvider::Stub(channel, options));
  return stub;
}

SubscriberProvider::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetSubscriber_(SubscriberProvider_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SubscriberProvider::Stub::SetSubscriber(::grpc::ClientContext* context, const ::location::Subscriber& request, ::location::SetSubscriberReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::location::Subscriber, ::location::SetSubscriberReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSubscriber_, context, request, response);
}

void SubscriberProvider::Stub::async::SetSubscriber(::grpc::ClientContext* context, const ::location::Subscriber* request, ::location::SetSubscriberReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::location::Subscriber, ::location::SetSubscriberReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSubscriber_, context, request, response, std::move(f));
}

void SubscriberProvider::Stub::async::SetSubscriber(::grpc::ClientContext* context, const ::location::Subscriber* request, ::location::SetSubscriberReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSubscriber_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::location::SetSubscriberReply>* SubscriberProvider::Stub::PrepareAsyncSetSubscriberRaw(::grpc::ClientContext* context, const ::location::Subscriber& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::location::SetSubscriberReply, ::location::Subscriber, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSubscriber_, context, request);
}

::grpc::ClientAsyncResponseReader< ::location::SetSubscriberReply>* SubscriberProvider::Stub::AsyncSetSubscriberRaw(::grpc::ClientContext* context, const ::location::Subscriber& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSubscriberRaw(context, request, cq);
  result->StartCall();
  return result;
}

SubscriberProvider::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SubscriberProvider_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SubscriberProvider::Service, ::location::Subscriber, ::location::SetSubscriberReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SubscriberProvider::Service* service,
             ::grpc::ServerContext* ctx,
             const ::location::Subscriber* req,
             ::location::SetSubscriberReply* resp) {
               return service->SetSubscriber(ctx, req, resp);
             }, this)));
}

SubscriberProvider::Service::~Service() {
}

::grpc::Status SubscriberProvider::Service::SetSubscriber(::grpc::ServerContext* context, const ::location::Subscriber* request, ::location::SetSubscriberReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ZoneRequestor_method_names[] = {
  "/location.ZoneRequestor/GetSubscriber",
  "/location.ZoneRequestor/GetSubscriberZones",
  "/location.ZoneRequestor/GetSubscribersInZone",
};

std::unique_ptr< ZoneRequestor::Stub> ZoneRequestor::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ZoneRequestor::Stub> stub(new ZoneRequestor::Stub(channel, options));
  return stub;
}

ZoneRequestor::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetSubscriber_(ZoneRequestor_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSubscriberZones_(ZoneRequestor_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSubscribersInZone_(ZoneRequestor_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ZoneRequestor::Stub::GetSubscriber(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::location::SubscriberReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::location::SubscriberId, ::location::SubscriberReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSubscriber_, context, request, response);
}

void ZoneRequestor::Stub::async::GetSubscriber(::grpc::ClientContext* context, const ::location::SubscriberId* request, ::location::SubscriberReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::location::SubscriberId, ::location::SubscriberReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubscriber_, context, request, response, std::move(f));
}

void ZoneRequestor::Stub::async::GetSubscriber(::grpc::ClientContext* context, const ::location::SubscriberId* request, ::location::SubscriberReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubscriber_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::location::SubscriberReply>* ZoneRequestor::Stub::PrepareAsyncGetSubscriberRaw(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::location::SubscriberReply, ::location::SubscriberId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSubscriber_, context, request);
}

::grpc::ClientAsyncResponseReader< ::location::SubscriberReply>* ZoneRequestor::Stub::AsyncGetSubscriberRaw(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSubscriberRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZoneRequestor::Stub::GetSubscriberZones(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::location::SubscriberZonesReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::location::SubscriberId, ::location::SubscriberZonesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSubscriberZones_, context, request, response);
}

void ZoneRequestor::Stub::async::GetSubscriberZones(::grpc::ClientContext* context, const ::location::SubscriberId* request, ::location::SubscriberZonesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::location::SubscriberId, ::location::SubscriberZonesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubscriberZones_, context, request, response, std::move(f));
}

void ZoneRequestor::Stub::async::GetSubscriberZones(::grpc::ClientContext* context, const ::location::SubscriberId* request, ::location::SubscriberZonesReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubscriberZones_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::location::SubscriberZonesReply>* ZoneRequestor::Stub::PrepareAsyncGetSubscriberZonesRaw(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::location::SubscriberZonesReply, ::location::SubscriberId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSubscriberZones_, context, request);
}

::grpc::ClientAsyncResponseReader< ::location::SubscriberZonesReply>* ZoneRequestor::Stub::AsyncGetSubscriberZonesRaw(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSubscriberZonesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ZoneRequestor::Stub::GetSubscribersInZone(::grpc::ClientContext* context, const ::location::ZoneId& request, ::location::SubscribersInZoneReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::location::ZoneId, ::location::SubscribersInZoneReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSubscribersInZone_, context, request, response);
}

void ZoneRequestor::Stub::async::GetSubscribersInZone(::grpc::ClientContext* context, const ::location::ZoneId* request, ::location::SubscribersInZoneReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::location::ZoneId, ::location::SubscribersInZoneReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubscribersInZone_, context, request, response, std::move(f));
}

void ZoneRequestor::Stub::async::GetSubscribersInZone(::grpc::ClientContext* context, const ::location::ZoneId* request, ::location::SubscribersInZoneReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubscribersInZone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::location::SubscribersInZoneReply>* ZoneRequestor::Stub::PrepareAsyncGetSubscribersInZoneRaw(::grpc::ClientContext* context, const ::location::ZoneId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::location::SubscribersInZoneReply, ::location::ZoneId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSubscribersInZone_, context, request);
}

::grpc::ClientAsyncResponseReader< ::location::SubscribersInZoneReply>* ZoneRequestor::Stub::AsyncGetSubscribersInZoneRaw(::grpc::ClientContext* context, const ::location::ZoneId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSubscribersInZoneRaw(context, request, cq);
  result->StartCall();
  return result;
}

ZoneRequestor::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZoneRequestor_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZoneRequestor::Service, ::location::SubscriberId, ::location::SubscriberReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZoneRequestor::Service* service,
             ::grpc::ServerContext* ctx,
             const ::location::SubscriberId* req,
             ::location::SubscriberReply* resp) {
               return service->GetSubscriber(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZoneRequestor_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZoneRequestor::Service, ::location::SubscriberId, ::location::SubscriberZonesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZoneRequestor::Service* service,
             ::grpc::ServerContext* ctx,
             const ::location::SubscriberId* req,
             ::location::SubscriberZonesReply* resp) {
               return service->GetSubscriberZones(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZoneRequestor_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZoneRequestor::Service, ::location::ZoneId, ::location::SubscribersInZoneReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ZoneRequestor::Service* service,
             ::grpc::ServerContext* ctx,
             const ::location::ZoneId* req,
             ::location::SubscribersInZoneReply* resp) {
               return service->GetSubscribersInZone(ctx, req, resp);
             }, this)));
}

ZoneRequestor::Service::~Service() {
}

::grpc::Status ZoneRequestor::Service::GetSubscriber(::grpc::ServerContext* context, const ::location::SubscriberId* request, ::location::SubscriberReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZoneRequestor::Service::GetSubscriberZones(::grpc::ServerContext* context, const ::location::SubscriberId* request, ::location::SubscriberZonesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ZoneRequestor::Service::GetSubscribersInZone(::grpc::ServerContext* context, const ::location::ZoneId* request, ::location::SubscribersInZoneReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace location

