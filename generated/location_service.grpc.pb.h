// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: location_service.proto
#ifndef GRPC_location_5fservice_2eproto__INCLUDED
#define GRPC_location_5fservice_2eproto__INCLUDED

#include "location_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace location {

class SubscriberProvider final {
 public:
  static constexpr char const* service_full_name() {
    return "location.SubscriberProvider";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SetSubscriber(::grpc::ClientContext* context, const ::location::Subscriber& request, ::location::SetSubscriberReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SetSubscriberReply>> AsyncSetSubscriber(::grpc::ClientContext* context, const ::location::Subscriber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SetSubscriberReply>>(AsyncSetSubscriberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SetSubscriberReply>> PrepareAsyncSetSubscriber(::grpc::ClientContext* context, const ::location::Subscriber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SetSubscriberReply>>(PrepareAsyncSetSubscriberRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SetSubscriber(::grpc::ClientContext* context, const ::location::Subscriber* request, ::location::SetSubscriberReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetSubscriber(::grpc::ClientContext* context, const ::location::Subscriber* request, ::location::SetSubscriberReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::location::SetSubscriberReply>* AsyncSetSubscriberRaw(::grpc::ClientContext* context, const ::location::Subscriber& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::location::SetSubscriberReply>* PrepareAsyncSetSubscriberRaw(::grpc::ClientContext* context, const ::location::Subscriber& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetSubscriber(::grpc::ClientContext* context, const ::location::Subscriber& request, ::location::SetSubscriberReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SetSubscriberReply>> AsyncSetSubscriber(::grpc::ClientContext* context, const ::location::Subscriber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SetSubscriberReply>>(AsyncSetSubscriberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SetSubscriberReply>> PrepareAsyncSetSubscriber(::grpc::ClientContext* context, const ::location::Subscriber& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SetSubscriberReply>>(PrepareAsyncSetSubscriberRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetSubscriber(::grpc::ClientContext* context, const ::location::Subscriber* request, ::location::SetSubscriberReply* response, std::function<void(::grpc::Status)>) override;
      void SetSubscriber(::grpc::ClientContext* context, const ::location::Subscriber* request, ::location::SetSubscriberReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::location::SetSubscriberReply>* AsyncSetSubscriberRaw(::grpc::ClientContext* context, const ::location::Subscriber& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::location::SetSubscriberReply>* PrepareAsyncSetSubscriberRaw(::grpc::ClientContext* context, const ::location::Subscriber& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetSubscriber_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SetSubscriber(::grpc::ServerContext* context, const ::location::Subscriber* request, ::location::SetSubscriberReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSubscriber() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSubscriber(::grpc::ServerContext* /*context*/, const ::location::Subscriber* /*request*/, ::location::SetSubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSubscriber(::grpc::ServerContext* context, ::location::Subscriber* request, ::grpc::ServerAsyncResponseWriter< ::location::SetSubscriberReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetSubscriber<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetSubscriber() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::location::Subscriber, ::location::SetSubscriberReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::location::Subscriber* request, ::location::SetSubscriberReply* response) { return this->SetSubscriber(context, request, response); }));}
    void SetMessageAllocatorFor_SetSubscriber(
        ::grpc::MessageAllocator< ::location::Subscriber, ::location::SetSubscriberReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::location::Subscriber, ::location::SetSubscriberReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSubscriber(::grpc::ServerContext* /*context*/, const ::location::Subscriber* /*request*/, ::location::SetSubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSubscriber(
      ::grpc::CallbackServerContext* /*context*/, const ::location::Subscriber* /*request*/, ::location::SetSubscriberReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetSubscriber<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSubscriber() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSubscriber(::grpc::ServerContext* /*context*/, const ::location::Subscriber* /*request*/, ::location::SetSubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSubscriber() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSubscriber(::grpc::ServerContext* /*context*/, const ::location::Subscriber* /*request*/, ::location::SetSubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSubscriber(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetSubscriber() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSubscriber(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSubscriber(::grpc::ServerContext* /*context*/, const ::location::Subscriber* /*request*/, ::location::SetSubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSubscriber(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSubscriber() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::location::Subscriber, ::location::SetSubscriberReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::location::Subscriber, ::location::SetSubscriberReply>* streamer) {
                       return this->StreamedSetSubscriber(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSubscriber(::grpc::ServerContext* /*context*/, const ::location::Subscriber* /*request*/, ::location::SetSubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSubscriber(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::location::Subscriber,::location::SetSubscriberReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetSubscriber<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetSubscriber<Service > StreamedService;
};

class ZoneRequestor final {
 public:
  static constexpr char const* service_full_name() {
    return "location.ZoneRequestor";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetSubscriber(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::location::SubscriberReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscriberReply>> AsyncGetSubscriber(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscriberReply>>(AsyncGetSubscriberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscriberReply>> PrepareAsyncGetSubscriber(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscriberReply>>(PrepareAsyncGetSubscriberRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSubscriberZones(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::location::SubscriberZonesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscriberZonesReply>> AsyncGetSubscriberZones(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscriberZonesReply>>(AsyncGetSubscriberZonesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscriberZonesReply>> PrepareAsyncGetSubscriberZones(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscriberZonesReply>>(PrepareAsyncGetSubscriberZonesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSubscribersInZone(::grpc::ClientContext* context, const ::location::ZoneId& request, ::location::SubscribersInZoneReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscribersInZoneReply>> AsyncGetSubscribersInZone(::grpc::ClientContext* context, const ::location::ZoneId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscribersInZoneReply>>(AsyncGetSubscribersInZoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscribersInZoneReply>> PrepareAsyncGetSubscribersInZone(::grpc::ClientContext* context, const ::location::ZoneId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscribersInZoneReply>>(PrepareAsyncGetSubscribersInZoneRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetSubscriber(::grpc::ClientContext* context, const ::location::SubscriberId* request, ::location::SubscriberReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSubscriber(::grpc::ClientContext* context, const ::location::SubscriberId* request, ::location::SubscriberReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSubscriberZones(::grpc::ClientContext* context, const ::location::SubscriberId* request, ::location::SubscriberZonesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSubscriberZones(::grpc::ClientContext* context, const ::location::SubscriberId* request, ::location::SubscriberZonesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSubscribersInZone(::grpc::ClientContext* context, const ::location::ZoneId* request, ::location::SubscribersInZoneReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSubscribersInZone(::grpc::ClientContext* context, const ::location::ZoneId* request, ::location::SubscribersInZoneReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscriberReply>* AsyncGetSubscriberRaw(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscriberReply>* PrepareAsyncGetSubscriberRaw(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscriberZonesReply>* AsyncGetSubscriberZonesRaw(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscriberZonesReply>* PrepareAsyncGetSubscriberZonesRaw(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscribersInZoneReply>* AsyncGetSubscribersInZoneRaw(::grpc::ClientContext* context, const ::location::ZoneId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::location::SubscribersInZoneReply>* PrepareAsyncGetSubscribersInZoneRaw(::grpc::ClientContext* context, const ::location::ZoneId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetSubscriber(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::location::SubscriberReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SubscriberReply>> AsyncGetSubscriber(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SubscriberReply>>(AsyncGetSubscriberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SubscriberReply>> PrepareAsyncGetSubscriber(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SubscriberReply>>(PrepareAsyncGetSubscriberRaw(context, request, cq));
    }
    ::grpc::Status GetSubscriberZones(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::location::SubscriberZonesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SubscriberZonesReply>> AsyncGetSubscriberZones(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SubscriberZonesReply>>(AsyncGetSubscriberZonesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SubscriberZonesReply>> PrepareAsyncGetSubscriberZones(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SubscriberZonesReply>>(PrepareAsyncGetSubscriberZonesRaw(context, request, cq));
    }
    ::grpc::Status GetSubscribersInZone(::grpc::ClientContext* context, const ::location::ZoneId& request, ::location::SubscribersInZoneReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SubscribersInZoneReply>> AsyncGetSubscribersInZone(::grpc::ClientContext* context, const ::location::ZoneId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SubscribersInZoneReply>>(AsyncGetSubscribersInZoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SubscribersInZoneReply>> PrepareAsyncGetSubscribersInZone(::grpc::ClientContext* context, const ::location::ZoneId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::location::SubscribersInZoneReply>>(PrepareAsyncGetSubscribersInZoneRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetSubscriber(::grpc::ClientContext* context, const ::location::SubscriberId* request, ::location::SubscriberReply* response, std::function<void(::grpc::Status)>) override;
      void GetSubscriber(::grpc::ClientContext* context, const ::location::SubscriberId* request, ::location::SubscriberReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSubscriberZones(::grpc::ClientContext* context, const ::location::SubscriberId* request, ::location::SubscriberZonesReply* response, std::function<void(::grpc::Status)>) override;
      void GetSubscriberZones(::grpc::ClientContext* context, const ::location::SubscriberId* request, ::location::SubscriberZonesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSubscribersInZone(::grpc::ClientContext* context, const ::location::ZoneId* request, ::location::SubscribersInZoneReply* response, std::function<void(::grpc::Status)>) override;
      void GetSubscribersInZone(::grpc::ClientContext* context, const ::location::ZoneId* request, ::location::SubscribersInZoneReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::location::SubscriberReply>* AsyncGetSubscriberRaw(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::location::SubscriberReply>* PrepareAsyncGetSubscriberRaw(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::location::SubscriberZonesReply>* AsyncGetSubscriberZonesRaw(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::location::SubscriberZonesReply>* PrepareAsyncGetSubscriberZonesRaw(::grpc::ClientContext* context, const ::location::SubscriberId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::location::SubscribersInZoneReply>* AsyncGetSubscribersInZoneRaw(::grpc::ClientContext* context, const ::location::ZoneId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::location::SubscribersInZoneReply>* PrepareAsyncGetSubscribersInZoneRaw(::grpc::ClientContext* context, const ::location::ZoneId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubscriber_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubscriberZones_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubscribersInZone_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetSubscriber(::grpc::ServerContext* context, const ::location::SubscriberId* request, ::location::SubscriberReply* response);
    virtual ::grpc::Status GetSubscriberZones(::grpc::ServerContext* context, const ::location::SubscriberId* request, ::location::SubscriberZonesReply* response);
    virtual ::grpc::Status GetSubscribersInZone(::grpc::ServerContext* context, const ::location::ZoneId* request, ::location::SubscribersInZoneReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSubscriber() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriber(::grpc::ServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscriber(::grpc::ServerContext* context, ::location::SubscriberId* request, ::grpc::ServerAsyncResponseWriter< ::location::SubscriberReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubscriberZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSubscriberZones() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSubscriberZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriberZones(::grpc::ServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberZonesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscriberZones(::grpc::ServerContext* context, ::location::SubscriberId* request, ::grpc::ServerAsyncResponseWriter< ::location::SubscriberZonesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubscribersInZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSubscribersInZone() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetSubscribersInZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscribersInZone(::grpc::ServerContext* /*context*/, const ::location::ZoneId* /*request*/, ::location::SubscribersInZoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscribersInZone(::grpc::ServerContext* context, ::location::ZoneId* request, ::grpc::ServerAsyncResponseWriter< ::location::SubscribersInZoneReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetSubscriber<WithAsyncMethod_GetSubscriberZones<WithAsyncMethod_GetSubscribersInZone<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSubscriber() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::location::SubscriberId, ::location::SubscriberReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::location::SubscriberId* request, ::location::SubscriberReply* response) { return this->GetSubscriber(context, request, response); }));}
    void SetMessageAllocatorFor_GetSubscriber(
        ::grpc::MessageAllocator< ::location::SubscriberId, ::location::SubscriberReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::location::SubscriberId, ::location::SubscriberReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriber(::grpc::ServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscriber(
      ::grpc::CallbackServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSubscriberZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSubscriberZones() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::location::SubscriberId, ::location::SubscriberZonesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::location::SubscriberId* request, ::location::SubscriberZonesReply* response) { return this->GetSubscriberZones(context, request, response); }));}
    void SetMessageAllocatorFor_GetSubscriberZones(
        ::grpc::MessageAllocator< ::location::SubscriberId, ::location::SubscriberZonesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::location::SubscriberId, ::location::SubscriberZonesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSubscriberZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriberZones(::grpc::ServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberZonesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscriberZones(
      ::grpc::CallbackServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberZonesReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSubscribersInZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSubscribersInZone() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::location::ZoneId, ::location::SubscribersInZoneReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::location::ZoneId* request, ::location::SubscribersInZoneReply* response) { return this->GetSubscribersInZone(context, request, response); }));}
    void SetMessageAllocatorFor_GetSubscribersInZone(
        ::grpc::MessageAllocator< ::location::ZoneId, ::location::SubscribersInZoneReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::location::ZoneId, ::location::SubscribersInZoneReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSubscribersInZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscribersInZone(::grpc::ServerContext* /*context*/, const ::location::ZoneId* /*request*/, ::location::SubscribersInZoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscribersInZone(
      ::grpc::CallbackServerContext* /*context*/, const ::location::ZoneId* /*request*/, ::location::SubscribersInZoneReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetSubscriber<WithCallbackMethod_GetSubscriberZones<WithCallbackMethod_GetSubscribersInZone<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSubscriber() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriber(::grpc::ServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubscriberZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSubscriberZones() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSubscriberZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriberZones(::grpc::ServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberZonesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubscribersInZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSubscribersInZone() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetSubscribersInZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscribersInZone(::grpc::ServerContext* /*context*/, const ::location::ZoneId* /*request*/, ::location::SubscribersInZoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSubscriber() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriber(::grpc::ServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscriber(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSubscriberZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSubscriberZones() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSubscriberZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriberZones(::grpc::ServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberZonesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscriberZones(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSubscribersInZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSubscribersInZone() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetSubscribersInZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscribersInZone(::grpc::ServerContext* /*context*/, const ::location::ZoneId* /*request*/, ::location::SubscribersInZoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscribersInZone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSubscriber() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSubscriber(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriber(::grpc::ServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscriber(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSubscriberZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSubscriberZones() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSubscriberZones(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSubscriberZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriberZones(::grpc::ServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberZonesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscriberZones(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSubscribersInZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSubscribersInZone() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSubscribersInZone(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSubscribersInZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscribersInZone(::grpc::ServerContext* /*context*/, const ::location::ZoneId* /*request*/, ::location::SubscribersInZoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscribersInZone(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSubscriber() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::location::SubscriberId, ::location::SubscriberReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::location::SubscriberId, ::location::SubscriberReply>* streamer) {
                       return this->StreamedGetSubscriber(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubscriber(::grpc::ServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubscriber(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::location::SubscriberId,::location::SubscriberReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubscriberZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSubscriberZones() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::location::SubscriberId, ::location::SubscriberZonesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::location::SubscriberId, ::location::SubscriberZonesReply>* streamer) {
                       return this->StreamedGetSubscriberZones(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSubscriberZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubscriberZones(::grpc::ServerContext* /*context*/, const ::location::SubscriberId* /*request*/, ::location::SubscriberZonesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubscriberZones(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::location::SubscriberId,::location::SubscriberZonesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubscribersInZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSubscribersInZone() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::location::ZoneId, ::location::SubscribersInZoneReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::location::ZoneId, ::location::SubscribersInZoneReply>* streamer) {
                       return this->StreamedGetSubscribersInZone(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSubscribersInZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubscribersInZone(::grpc::ServerContext* /*context*/, const ::location::ZoneId* /*request*/, ::location::SubscribersInZoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubscribersInZone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::location::ZoneId,::location::SubscribersInZoneReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSubscriber<WithStreamedUnaryMethod_GetSubscriberZones<WithStreamedUnaryMethod_GetSubscribersInZone<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSubscriber<WithStreamedUnaryMethod_GetSubscriberZones<WithStreamedUnaryMethod_GetSubscribersInZone<Service > > > StreamedService;
};

}  // namespace location


#endif  // GRPC_location_5fservice_2eproto__INCLUDED
